/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";

interface RoomBaseInterface extends ethers.utils.Interface {
  functions: {
    "CalculateCreatorReward(tuple)": FunctionFragment;
    "CreatorRewardTracker(address)": FunctionFragment;
    "CreatorRoomTracker(address)": FunctionFragment;
    "EndRoom()": FunctionFragment;
    "JoinRoom(address)": FunctionFragment;
    "StartRoom(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "CalculateCreatorReward",
    values: [
      {
        roomID: string;
        isOpened: boolean;
        isClosed: boolean;
        startTime: BigNumberish;
        endTime: BigNumberish;
        usersCount: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "CreatorRewardTracker",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "CreatorRoomTracker",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "EndRoom", values?: undefined): string;
  encodeFunctionData(functionFragment: "JoinRoom", values: [string]): string;
  encodeFunctionData(functionFragment: "StartRoom", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "CalculateCreatorReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CreatorRewardTracker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CreatorRoomTracker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "EndRoom", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "JoinRoom", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "StartRoom", data: BytesLike): Result;

  events: {};
}

export class RoomBase extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: RoomBaseInterface;

  functions: {
    CalculateCreatorReward(
      _room: {
        roomID: string;
        isOpened: boolean;
        isClosed: boolean;
        startTime: BigNumberish;
        endTime: BigNumberish;
        usersCount: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    CreatorRewardTracker(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    CreatorRoomTracker(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, boolean, boolean, BigNumber, BigNumber, BigNumber] & {
        roomID: string;
        isOpened: boolean;
        isClosed: boolean;
        startTime: BigNumber;
        endTime: BigNumber;
        usersCount: BigNumber;
      }
    >;

    EndRoom(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    JoinRoom(
      roomID: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    StartRoom(
      _roomID: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  CalculateCreatorReward(
    _room: {
      roomID: string;
      isOpened: boolean;
      isClosed: boolean;
      startTime: BigNumberish;
      endTime: BigNumberish;
      usersCount: BigNumberish;
    },
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  CreatorRewardTracker(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  CreatorRoomTracker(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [string, boolean, boolean, BigNumber, BigNumber, BigNumber] & {
      roomID: string;
      isOpened: boolean;
      isClosed: boolean;
      startTime: BigNumber;
      endTime: BigNumber;
      usersCount: BigNumber;
    }
  >;

  EndRoom(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  JoinRoom(
    roomID: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  StartRoom(
    _roomID: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    CalculateCreatorReward(
      _room: {
        roomID: string;
        isOpened: boolean;
        isClosed: boolean;
        startTime: BigNumberish;
        endTime: BigNumberish;
        usersCount: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    CreatorRewardTracker(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    CreatorRoomTracker(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, boolean, boolean, BigNumber, BigNumber, BigNumber] & {
        roomID: string;
        isOpened: boolean;
        isClosed: boolean;
        startTime: BigNumber;
        endTime: BigNumber;
        usersCount: BigNumber;
      }
    >;

    EndRoom(overrides?: CallOverrides): Promise<void>;

    JoinRoom(roomID: string, overrides?: CallOverrides): Promise<boolean>;

    StartRoom(_roomID: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {};

  estimateGas: {
    CalculateCreatorReward(
      _room: {
        roomID: string;
        isOpened: boolean;
        isClosed: boolean;
        startTime: BigNumberish;
        endTime: BigNumberish;
        usersCount: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    CreatorRewardTracker(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    CreatorRoomTracker(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    EndRoom(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    JoinRoom(
      roomID: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    StartRoom(
      _roomID: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    CalculateCreatorReward(
      _room: {
        roomID: string;
        isOpened: boolean;
        isClosed: boolean;
        startTime: BigNumberish;
        endTime: BigNumberish;
        usersCount: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CreatorRewardTracker(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CreatorRoomTracker(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    EndRoom(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    JoinRoom(
      roomID: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    StartRoom(
      _roomID: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
